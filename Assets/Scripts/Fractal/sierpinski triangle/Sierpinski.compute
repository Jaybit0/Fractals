#pragma kernel CSMain

RWTexture2D<float4> Destination;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
float3 _LightDirection;

float darkness;
float blackAndWhite;
float3 colourAMix;
float scale;
int iterations;

static const float epsilon = 0.001f;
static const float maxDst = 200;
static const int maxStepCount = 250;

struct Ray {
    float3 origin;
    float3 direction;
};

Ray CreateRay(float3 origin, float3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv) {
    float3 origin = mul(_CameraToWorld, float4(0, 0, 0, 1)).xyz;
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0, 1)).xyz;
    direction = mul(_CameraToWorld, float4(direction, 0)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}

struct Sphere {
    float3 p;
    float r;
};

struct Pyramid {
    float3 p;
    float h;
};

float sdSphere(float3 p, Sphere s) {
    return length(p-s.p) - s.r;
}

float sdPyramid(float3 p, Pyramid py) {
    p -= py.p;
    float m2 = py.h * py.h + 0.25;

    p.xz = abs(p.xz);
    p.xz = (p.z > p.x) ? p.zx : p.xz;
    p.xz -= 0.5;

    float3 q = float3(p.z, py.h * p.y - 0.5 * py.h, py.h * p.x + 0.5 * p.y);

    float s = max(-q.x, 0.0);
    float t = clamp((q.y - 0.5 * p.z) / (m2 + 0.25), 0.0, 1.0);

    float a = m2 * (q.x + s) * (q.x + s) + q.y * q.y;
    float b = m2 * (q.x + 0.5 * t) * (q.x + 0.5 * t) + (q.y - m2 * t) * (q.y - m2 * t);

    float d2 = min(q.y, -q.x * m2 - q.y * 0.5) > 0.0 ? 0.0 : min(a, b);

    return sqrt((d2 + q.z * q.z) / m2) * sign(max(q.z, -p.y));
}

float DE(float3 z) {
    float3 a1 = float3(1, 1, 1);
    float3 a2 = float3(-1, -1, 1);
    float3 a3 = float3(1, -1, -1);
    float3 a4 = float3(-1, 1, -1);
    float3 c;
    int n = 0;
    float dist, d;
    while (n < iterations) {
        c = a1; dist = length(z - a1);
        d = length(z - a2); if (d < dist) { c = a2; dist = d; }
        d = length(z - a3); if (d < dist) { c = a3; dist = d; }
        d = length(z - a4); if (d < dist) { c = a4; dist = d; }
        z = scale * z - c * (scale - 1.0);
        n++;
    }

    return length(z) * pow(scale, float(-n));
}

float SceneInfo(float3 position) {
    /*Sphere s;
    s.r = 0.5;
    s.p = float3(0.5, 0.5, 0);
    Pyramid p;
    p.p = float3(1, 0, 0);
    p.h = 1;
    return max(sdPyramid(position, p), sdSphere(position, s));*/
    return DE(position);
}

float3 EstimateNormal(float3 p) {
    float x = SceneInfo(float3(p.x + epsilon, p.y, p.z)) - SceneInfo(float3(p.x - epsilon, p.y, p.z));
    float y = SceneInfo(float3(p.x, p.y + epsilon, p.z)) - SceneInfo(float3(p.x, p.y - epsilon, p.z));
    float z = SceneInfo(float3(p.x, p.y, p.z + epsilon)) - SceneInfo(float3(p.x, p.y, p.z - epsilon));
    return normalize(float3(x, y, z));
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Destination.GetDimensions(width, height);

    float2 uv = id.xy / float2(width, height);

    // Background gradient
    float4 result = lerp(float4(51, 3, 20, 1), float4(16, 6, 28, 1), uv.y) / 255.0;

    // Raymarching:
    Ray ray = CreateCameraRay(uv * 2 - 1);
    float rayDst = 0;
    int marchSteps = 0;

    while (rayDst < maxDst && marchSteps < maxStepCount) {
        marchSteps++;
        float dst = SceneInfo(ray.origin);

        // Ray has hit a surface
        if (dst <= epsilon) {
            //float escapeIterations = sceneInfo.x;
            float3 normal = EstimateNormal(ray.origin - ray.direction * epsilon * 2);

            float colourA = saturate(dot(normal * .5 + .5, -_LightDirection));
            //float colourB = saturate(escapeIterations / 16.0);
            float3 colourMix = saturate(colourA * colourAMix /*+ colourB * colourBMix*/);
            //float colourA = saturate(dot(.5, -_LightDirection));
            //float3 colourMix = saturate(colourA);
            result = float4(colourMix.xyz, 1);
            break;
        }
        ray.origin += ray.direction * dst;
        rayDst += dst;
    }

    float rim = marchSteps / darkness;
    Destination[id.xy] = /*result * rim;*/lerp(result, 1, blackAndWhite) * rim;
}
